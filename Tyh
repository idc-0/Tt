from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import random
import logging

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
API_TOKEN = '–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üçâ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É"))
    keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥"))
    keyboard.add(KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã
def add_water_menu():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("100 –º–ª", callback_data="add_100"))
    keyboard.add(InlineKeyboardButton("200 –º–ª", callback_data="add_200"))
    keyboard.add(InlineKeyboardButton("300 –º–ª", callback_data="add_300"))
    keyboard.add(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="add_custom"))
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def stats_menu():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ó–∞ –¥–µ–Ω—å", callback_data="stats_day"))
    keyboard.add(InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_week"))
    keyboard.add(InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="stats_month"))
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard

# –°–ø–∏—Å–æ–∫ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã—Ö —Ñ—Ä–∞–∑
sarcastic_phrases = [
    "–ù—É —á—Ç–æ, –≥–µ—Ä–æ–π, –µ—â–µ –æ–¥–∏–Ω –≥–ª–æ—Ç–æ–∫, –∏ —Ç—ã –ø–æ–±–µ–¥–∏—à—å –∂–∞–∂–¥—É! üçπ",
    "–° —Ç–∞–∫–∏–º —Ç–µ–º–ø–æ–º, —Ç—ã —Å—Ç–∞–Ω–µ—à—å –∞–∫–≤–∞—Ä–∏—É–º–æ–º! üêü",
    "–ö—É–¥–∞ —Å—Ç–æ–ª—å–∫–æ –≤–æ–¥—ã? –¢—ã —á—Ç–æ, –≤–µ—Ä–±–ª—é–¥? üê™",
    "–ö–∞–∂–µ—Ç—Å—è, —è –Ω–∞—á–∏–Ω–∞—é –∑–∞–≤–∏–¥–æ–≤–∞—Ç—å —Ç–≤–æ–µ–º—É —É–Ω–∏—Ç–∞–∑—É... üöΩ",
    "–ï—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—à—å —Ç–∞–∫ –ø–∏—Ç—å, —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—à—å —Ñ–æ–Ω—Ç–∞–Ω–æ–º! ‚õ≤Ô∏è"
]

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–ê—Ä–±—É–∑–∏–∫'! üçâ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—Ç–∞—Ç—å —Å–∞–º—ã–º –≥–∏–¥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ! üíß",
        reply_markup=main_menu()
    )

@dp.message_handler(lambda message: message.text == "üçâ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É")
async def add_water(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã:", reply_markup=add_water_menu())

@dp.callback_query_handler(lambda c: c.data.startswith("add_"))
async def handle_add_water(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "add_custom":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã (–º–ª):")
    else:
        amount = int(data.split("_")[1])
        phrase = random.choice(sarcastic_phrases)
        await bot.send_message(callback_query.message.chat.id, f"–¢—ã –¥–æ–±–∞–≤–∏–ª {amount} –º–ª –≤–æ–¥—ã! {phrase}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        with open("images/watermelon_funny.jpg", "rb") as photo:
            await bot.send_photo(callback_query.message.chat.id, photo, caption="–ê—Ä–±—É–∑–∏–∫ –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π! üçâ")

@dp.message_handler(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=stats_menu())

@dp.callback_query_handler(lambda c: c.data.startswith("stats_"))
async def handle_stats(callback_query: types.CallbackQuery):
    period = {"day": "–∑–∞ –¥–µ–Ω—å", "week": "–∑–∞ –Ω–µ–¥–µ–ª—é", "month": "–∑–∞ –º–µ—Å—è—Ü"}[callback_query.data.split("_")[1]]
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await bot.send_message(callback_query.message.chat.id, f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period}:")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    with open("images/watermelon_stats.jpg", "rb") as photo:
        await bot.send_photo(callback_query.message.chat.id, photo, caption=f"–í–æ—Ç —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period}! üìä")

@dp.message_handler(lambda message: message.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
async def show_leaderboard(message: types.Message):
    # –ü—Ä–∏–º–µ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞
    leaderboard = "üèÜ –¢–æ–ø-3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n1. @user1 - 2.5 –ª\n2. @user2 - 2.2 –ª\n3. @user3 - 2.0 –ª"
    await message.reply(leaderboard, reply_markup=main_menu())

@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: types.Message):
    await message.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –í –±—É–¥—É—â–µ–º —Ç—ã —Å–º–æ–∂–µ—à—å –∏–∑–º–µ–Ω—è—Ç—å —Ü–µ–ª–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=main_menu())

@dp.message_handler(content_types=['text'])
async def process_text(message: types.Message):
    if message.text.isdigit():
        amount = int(message.text)
        phrase = random.choice(sarcastic_phrases)
        await message.reply(f"–¢—ã –¥–æ–±–∞–≤–∏–ª {amount} –º–ª –≤–æ–¥—ã! {phrase}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        with open("images/watermelon_funny.jpg", "rb") as photo:
            await bot.send_photo(message.chat.id, photo, caption="–ê—Ä–±—É–∑–∏–∫ –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π! üçâ")
    else:
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True) 

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
import asyncio
import random

# –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class UserStates(StatesGroup):
    set_goal = State()
    add_custom_water = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üçâ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É")
    builder.row(builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), builder.button(text="üèÜ –†–µ–π—Ç–∏–Ω–≥"))
    builder.button(text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    builder.row(builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    return builder.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã
def add_water_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="100 –º–ª", callback_data="add_100")
    builder.button(text="200 –º–ª", callback_data="add_200")
    builder.button(text="300 –º–ª", callback_data="add_300")
    builder.button(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="add_custom")
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="main_menu")
    return builder.as_markup()

# –°–ø–∏—Å–æ–∫ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã—Ö —Ñ—Ä–∞–∑
sarcastic_phrases = [
    "–ù—É —á—Ç–æ, –≥–µ—Ä–æ–π, –µ—â–µ –æ–¥–∏–Ω –≥–ª–æ—Ç–æ–∫, –∏ —Ç—ã –ø–æ–±–µ–¥–∏—à—å –∂–∞–∂–¥—É! üçπ",
    "–° —Ç–∞–∫–∏–º —Ç–µ–º–ø–æ–º, —Ç—ã —Å—Ç–∞–Ω–µ—à—å –∞–∫–≤–∞—Ä–∏—É–º–æ–º! üêü",
    "–ö–∞–∂–µ—Ç—Å—è, —è –Ω–∞—á–∏–Ω–∞—é –∑–∞–≤–∏–¥–æ–≤–∞—Ç—å —Ç–≤–æ–µ–º—É —É–Ω–∏—Ç–∞–∑—É... üöΩ",
    "–ï—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—à—å —Ç–∞–∫ –ø–∏—Ç—å, —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—à—å —Ñ–æ–Ω—Ç–∞–Ω–æ–º! ‚õ≤Ô∏è",
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(commands=["start"])
async def send_welcome(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–ê—Ä–±—É–∑–∏–∫'! üçâ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—Ç–∞—Ç—å —Å–∞–º—ã–º –≥–∏–¥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ! üíß",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É"
@dp.message(F.text == "üçâ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É")
async def add_water(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã:", reply_markup=add_water_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Inline-–∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def handle_callback(query: CallbackQuery, state: FSMContext):
    data = query.data
    if data == "main_menu":
        await query.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    elif data.startswith("add_"):
        if data == "add_custom":
            await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã (–º–ª):")
            await state.set_state(UserStates.add_custom_water)
        else:
            amount = data.split("_")[1]
            phrase = random.choice(sarcastic_phrases)
            await query.message.answer(f"–¢—ã –¥–æ–±–∞–≤–∏–ª {amount} –º–ª –≤–æ–¥—ã! {phrase}")
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"
@dp.message(UserStates.add_custom_water)
async def handle_custom_water(message: Message, state: FSMContext):
    if message.text.isdigit():
        amount = int(message.text)
        phrase = random.choice(sarcastic_phrases)
        await message.answer(f"–¢—ã –¥–æ–±–∞–≤–∏–ª {amount} –º–ª –≤–æ–¥—ã! {phrase}", reply_markup=main_menu())
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    await message.answer("–¢—ã –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª —Å–≤–æ—é —Ü–µ–ª—å. –ù–æ –ê—Ä–±—É–∑–∏–∫ –≤ —Ç–µ–±—è –≤–µ—Ä–∏—Ç! üçâ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–π—Ç–∏–Ω–≥"
@dp.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
async def show_leaderboard(message: Message):
    leaderboard = (
        "üèÜ –¢–æ–ø-3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        "1. @user1 - 2.5 –ª\n"
        "2. @user2 - 2.2 –ª\n"
        "3. @user3 - 2.0 –ª"
    )
    await message.answer(leaderboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
@dp.message(F.text == "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def reminders(message: Message):
    await message.answer(
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ —Ç—ã —Å–º–æ–∂–µ—à—å –∏—Ö –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å! üîî"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: Message):
    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í –±—É–¥—É—â–µ–º —Ç—ã —Å–º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ —Ü–µ–ª–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. üõ†Ô∏è"
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üçâ")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
